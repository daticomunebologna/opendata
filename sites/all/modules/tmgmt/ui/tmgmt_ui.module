<?php

/**
 * @file
 * Common Translation managment UI.
 */

/**
 * Implements hook_entity_info().
 */
function tmgmt_ui_entity_info() {
  $info['tmgmt_translator'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTTranslatorUIController',
      'path' => 'admin/config/regional/tmgmt/translators',
    ),
  );
  $info['tmgmt_job'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTJobUIController',
      'path' => 'admin/config/regional/tmgmt/jobs',
    ),
  );
  $info['tmgmt_job_item'] = array(
    'admin ui' => array(
      'controller class' => 'TMGMTJobItemUIController',
      'path' => 'admin/config/regional/tmgmt/items',
    ),
  );
  foreach ($info as $key => $item) {
    // Entity API defaults to the path that implements the entity type, but
    // since this happens in the TMGMT core module, we need to manually
    // define the path here.
    $info[$key]['admin ui']['file path'] = drupal_get_path('module', 'tmgmt_ui');
    $info[$key]['admin ui']['file'] = 'includes/tmgmt_ui.pages.inc';
  }
  return $info;
}

/**
 * Implements hook_menu().
 */
function tmgmt_ui_menu() {
  $items['admin/config/regional/tmgmt'] = array(
    'title' => 'Translation Management',
    'description' => 'Use the Translation Management Tool',
    'page callback' => 'tmgmt_ui_dashboard_page',
    'page arguments' => array('tmgmt_job_overview'),
    'access arguments' => array('administer tmgmt'),
  );
  $items['admin/config/regional/tmgmt/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer tmgmt'),
    'weight' => -10,
  );
  $items['admin/config/regional/tmgmt/overview/dashboard'] = array(
    'title' => 'Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer tmgmt'),
    'weight' => -10,
  );
  $items['admin/config/regional/tmgmt/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_ui_settings_form'),
    'access arguments' => array('administer tmgmt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tmgmt_ui.pages.inc',
    'weight' => 10,
  );
  // Some source plugins might provide menu items.
  foreach (tmgmt_source_ui_controller() as $controller) {
    $items += $controller->hook_menu();
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function tmgmt_ui_theme() {
  return array(
    'tmgmt_ui_translator_overview_item' => array(
      // We also have the entity_type here because we are still populating the
      // defaults via the entity api so we just need to add the description.
      'variables' => array('label' => NULL, 'entity_type' => NULL, 'url' => FALSE, 'name' => FALSE, 'description' => FALSE),
      'file' => 'includes/tmgmt_ui.controller.inc',
    ),
    'tmgmt_ui_translator_overview_form' => array(
      'render element' => 'form',
      'file' => 'includes/tmgmt_ui.controller.inc',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function tmgmt_ui_forms() {
  $forms = array();
  foreach (tmgmt_source_plugin_info() as $plugin => $info) {
    $forms['tmgmt_ui_' . $plugin . '_translation_review_form'] = array(
      'callback' => 'tmgmt_ui_translation_review_form',
      'wrapper_callback' => 'tmgmt_ui_translation_review_form_defaults',
    );
  }
  // Some source plugins might provide forms.
  foreach (tmgmt_source_ui_controller() as $controller) {
    $forms += $controller->hook_forms();
  }
  return $forms;
}

/**
 * Implements hook_system_info_alter().
 */
function tmgmt_ui_system_info_alter(&$info, $file, $type) {
  if ($file->name == 'tmgmt') {
    $info['configure'] = 'admin/config/regional/tmgmt/settings';
  }
}

/**
 * Implements hook_views_api().
 */
function tmgmt_ui_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_views_default_views().
 */
function tmgmt_ui_views_default_views() {
  $views = _tmgmt_load_exports('tmgmt_ui', 'views', 'view.inc', 'view');
  // Some source controllers might provide custom views.
  foreach (tmgmt_source_ui_controller() as $controller) {
    $views += $controller->hook_views_default_views();
  }
  return $views;
}

 /**
 * Embed a view but don't render it if it's empty.
 *
 * @param $view
 *   The machine-readable name of the view.
 *
 * @return
 *   The rendered view or an empty string if the view doesn't exist if it was
 *   empty.
  */
function tmgmt_ui_embed_view($view) {
  $view = views_get_view($view);
  if (!empty($view)) {
    $view->init_display();
    $output = $view->preview();
    if (!empty($view->result)) {
      return $output;
    }
  }
  return '';
}

/**
 * Page callback for the overview page.
 */
function tmgmt_ui_dashboard_page() {
  // @todo Implement the dashboard.
  return '';
}

/**
 * Form callback for the source overview form.
 */
function tmgmt_ui_source_overview_form($form, &$form_state, $plugin, $item_type = NULL) {
  $controller = tmgmt_source_ui_controller($plugin);
  return $controller->overviewForm($form, $form_state, $item_type);
}

/**
 * Form callback for the source overview form.
 */
function tmgmt_ui_source_overview_form_defaults($form, &$form_state, $plugin, $item_type = NULL) {
  $controller = tmgmt_source_plugin_controller($plugin);
  $info = tmgmt_source_plugin_info($plugin);
  // Set a generic title that includes the source plugin and item type label.
  drupal_set_title(t('@plugin overview (@type)', array('@type' => $controller->getItemTypeLabel($item_type), '@plugin' => $info['label'])), PASS_THROUGH);
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Request translation'),
  );
  return $form;
}

/**
 * Validation callback for the source overview form.
 */
function tmgmt_ui_source_overview_form_validate($form, &$form_state) {
  // Copy the form state so we are not removing important information from it
  // when sending it through form_state_values_clean().
  $cleaned = $form_state;
  form_state_values_clean($cleaned);
  if (empty($cleaned['values'])) {
    form_set_error('items', t("You didn't select any source objects"));
  }
  list($plugin, $item_type) = $form_state['build_info']['args'];
  // Execute the validation method on the source plugin controller.
  $controller = tmgmt_source_ui_controller($plugin);
  $controller->overviewFormValidate($form, $form_state, $item_type);
}

/**
 * Submit callback for the source overview form.
 */
function tmgmt_ui_source_overview_form_submit($form, &$form_state) {
  list($plugin, $item_type) = $form_state['build_info']['args'];
  // Execute the submit method on the source plugin controller.
  $controller = tmgmt_source_ui_controller($plugin);
  $controller->overviewFormSubmit($form, $form_state, $item_type);
}

/**
 * Attempts to check out a number of jobs. Performs a number of checks on each
 * job and also allows to alter the behavior through hooks.
 *
 * @param $jobs
 *   The jobs to be checked out.
 *
 * @return
 *   Array of redirect url's if there are any jobs that need manual checkout.
 *
 * @ingroup tmgmt_job
 * @see tmgmt_ui_redirect_queue()
 */
function tmgmt_ui_job_checkout_multiple(array $jobs) {
  $redirects = array();
  // Allow other modules to jump in and eg. auto-checkout with rules or use a
  // customized checkout form.
  drupal_alter('tmgmt_ui_job_checkout_before', $redirects, $jobs);
  foreach ($jobs as $job) {
    if (!$job->isUnprocessed()) {
      // Job is already checked out, just ignore that one. This could happen
      // if jobs have already been submitted in the before hook.
      continue;
    }
    // @todo: Add permission checks.
    if (!variable_get('tmgmt_quick_checkout', TRUE) || tmgmt_ui_job_needs_checkout_form($job)) {
      $uri = $job->uri();
      $redirects[] = $uri['path'] . '/manage';
    }
    else {
      // @todo this is dangerous because we don't catch request fails at all.
      // Normally I would expect this to catch all failed requests and
      // afterwards send the user through a multistep form which contains the
      // failed elements.
      // No manual checkout required. Request translations now.
      tmgmt_ui_job_request_translation($job);
    }
  }
  // Allow other modules to jump in and eg. auto-checkout with rules or use a
  // customized checkout form.
  drupal_alter('tmgmt_ui_job_checkout_after', $redirects, $jobs);
  return $redirects;
}

/**
 * Check if a job needs a checkout form. The current checks include if there is
 * more than one translator available, if he has settings and if the job has a
 * fixed target language.
 *
 * @param TMGMTJob $job
 *   The job item
 *
 * @return
 *   TRUE if the job needs a checkout form.
 */
function tmgmt_ui_job_needs_checkout_form(TMGMTJob $job) {
  // If the job has no target language (or source language, even though this
  // should never be the case in our use case), checkout is mandatory.
  if (empty($job->target_language) || empty($job->source_language)) {
    return TRUE;
  }
  // If there is more than a single translator available or if there are no
  // translators available at all checkout is mandatory.
  $translators = tmgmt_translator_load_available($job);
  if (empty($translators) || count($translators) > 1) {
    return TRUE;
  }
  $translator = reset($translators);
  $job->translator = $translator->name;
  // If that translator has settings, the checkout is mandatory.
  if ($translator->hasCheckoutSettings($job)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Requests translations for a job and prints messages which have happened since
 * then.
 *
 * @param TMGMTJob $job
 *   The job object for which translations should be requested.
 *
 * @return
 *   TRUE if it worked, FALSE if there were any errors of the type error which
 *   means that something did go wrong.
 */
function tmgmt_ui_job_request_translation(TMGMTJob $job) {
  // Process the translation request.
  $job->requestTranslation();
  // Print all messages that occurred since our request to the screen.
  $errors = FALSE;
  foreach ($job->getMessagesSince() as $message) {
    // Ignore debug messages.
    if ($message->type == 'debug') {
      continue;
    }
    if ($message->type == 'error') {
      $errors = TRUE;
    }
    if ($text = $message->getMessage()) {
      drupal_set_message(filter_xss($text), $message->type);
    }
  }
  return !$errors;
}

/**
 * Form wrapper callback for the job item review form.
 *
 * @see tmgmt_ui_forms()
 */
function tmgmt_ui_translation_review_form_defaults($form, &$form_state, TMGMTJobItem $item) {
  // We store the item in the root of the form state so we can easily access it
  // in all the form functions.
  $form_state['item'] = $item;
  // Actually build the review form elements...
  $form['review'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );
  // Recursively build the review form.
  $form['review'] += _tmgmt_ui_review_form_recursive($form_state, $item->getTranslatedData());
  // Add the form actions as well.
  $form['actions']['#type'] = 'actions';
  $form['actions']['accept'] = array(
    '#type' => 'submit',
    '#value' => t('Accept'),
  );
  $form['actions']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save review'),
  );
  $uri = $item->uri();
  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => $uri['path'],
  );
  // The reject functionality has to be implement by the translator plugin as
  // that process is completely unique and custom for each translation service.
  return $form;
}

/**
 * Form callback for the job item review form.
 *
 * @see tmgmt_ui_forms()
 */
function tmgmt_ui_translation_review_form($form, &$form_state, TMGMTJobItem $item) {
  // Give the source ui controller a chance to affect the review form.
  $source = tmgmt_source_ui_controller($item->plugin);
  $form = $source->reviewForm($form, $form_state, $item);
  // Give the translator ui controller a chance to affect the review form.
  $translator = tmgmt_translator_ui_controller($item->getTranslator()->plugin);
  $translator->reviewForm($form, $form_state, $item);
  return $form;
}

/**
 * Validation callback for the job item review form.
 */
function tmgmt_ui_translation_review_form_validate($form, &$form_state) {
  $item = $form_state['item'];
  // First invoke the validation method on the source controller.
  $source = tmgmt_source_ui_controller($item->plugin);
  $source->reviewFormValidate($form, $form_state, $item);
  // Then invoke the validation method on the source controller.
  $translator = tmgmt_translator_ui_controller($item->getTranslator()->plugin);
  $translator->reviewFormValidate($form, $form_state, $item);
}

/**
 * Submit callback for the job item review form.
 */
function tmgmt_ui_translation_review_form_submit($form, &$form_state) {
  $item = $form_state['item'];
  // Rewrite the submitted data values to #text.
  _tmgmt_ui_submit_translation_review_data($form_state['values']['review'], $item->translation);
  // First invoke the submit method on the source controller.
  $source = tmgmt_source_ui_controller($item->plugin);
  $source->reviewFormSubmit($form, $form_state, $item);
  // Then invoke the submit method on the source controller.
  $translator = tmgmt_translator_ui_controller($item->getTranslator()->plugin);
  $translator->reviewFormSubmit($form, $form_state, $item);
  // Check if the user clicked on 'Accept', 'Submit' or 'Reject'.
  if ($form_state['triggering_element']['#value'] == $form['actions']['accept']['#value']) {
    $item->acceptTranslation();
    // Check if the item could be saved and accepted successfully and redirect
    // to the job item view if that is the case.
    if ($item->isAccepted()) {
      $uri = $item->uri();
      $form_state['redirect'] = $uri['path'];
    }
    // Print all messages that have been saved while accepting the reviewed
    // translation.
    foreach ($item->getMessagesSince() as $message) {
      // Ignore debug messages.
      if ($message->type == 'debug') {
        continue;
      }
      if ($text = $message->getMessage()) {
        drupal_set_message(filter_xss($text), $message->type);
      }
    }
  }
  // Submit the entity.
  $item->save();
}

/**
 * Helper function for recursively building a review form.
 */
function _tmgmt_ui_review_form_recursive(&$form_state, $translation) {
  $form = array();
  foreach (element_children($translation) as $key) {
    if (is_array($translation[$key]) && !empty($translation[$key]['#text'])) {
      $form[$key] = array(
        '#type' => 'textarea',
        '#title' => isset($translation[$key]['#label']) ? $translation[$key]['#label'] : t('Unlabelled'),
        '#default_value' => isset($translation[$key]['#text']) ? $translation[$key]['#text'] : '',
      );
    }
    elseif (is_array($translation[$key])) {
      $form[$key] = _tmgmt_ui_review_form_recursive($form_state, $translation[$key]);
    }
  }
  return $form;
}

/**
 * Helper function for recursively updating the translated data values in a job
 * item when submitted in the review form.
 *
 * This workaround is necessary because we can't use '#text' as an array key in
 * our FAPI structure.
 */
function _tmgmt_ui_submit_translation_review_data($values, &$data, $parents = array()) {
  foreach ($values as $key => $value) {
    if (is_array($value)) {
      _tmgmt_ui_submit_translation_review_data($values[$key], $data, array_merge($parents, array($key)));
    }
    else {
      drupal_array_set_nested_value($data, array_merge($parents, array($key, '#text')), $value);
    }
  }
}

/**
 * @addtogroup tmgmt_ui_redirect_queue
 * @{
 */
/**
 * Set a redirect queue that can then be worked through.
 *
 * @param $redirects
 *   An array of redirect url's to be processed. For example checkout pages as
 *   returned by tmgmt_ui_job_checkout_multiple().
 * @param $destination
 *   A final destination to go to after the queue has been processed.
 */
function tmgmt_ui_redirect_queue_set(array $redirects, $destination = NULL) {
  $_SESSION['tmgmt_ui']['redirect_queue'] = $redirects;
  $_SESSION['tmgmt_ui']['destination'] = $destination;
}

/**
 * Returns the redirect queue destination.
 *
 * This is the final destination after all queue items have been processed.
 *
 * @param $destination
 *   The default destination that should be returned if none exists.
 *
 * @return
 *   The stored destination if defined, otherwise the passed in default
 *   destination.
 */
function tmgmt_ui_redirect_queue_destination($destination = NULL) {
  if (!empty($_SESSION['tmgmt_ui']['destination'])) {
     $destination = $_SESSION['tmgmt_ui']['destination'];
     unset($_SESSION['tmgmt_ui']['destination']);
     return $destination;
  }
  return $destination;
}

/**
 * Returns the amount of entries in the redirect queue.
 *
 * @return
 *   The amount of entries in the redirect queue.
 */
function tmgmt_ui_redirect_queue_count() {
  if (!empty($_SESSION['tmgmt_ui']['redirect_queue'])) {
    return count($_SESSION['tmgmt_ui']['redirect_queue']);
  }
  return 0;
}

/**
 * Dequeues one redirect in the queue and returns that.
 *
 * @return
 *   A redirect URL or NULL if the queue is empty.
 */
function tmgmt_ui_redirect_queue_dequeue() {
  if (!empty($_SESSION['tmgmt_ui']['redirect_queue'])) {
    return array_shift($_SESSION['tmgmt_ui']['redirect_queue']);
  }
}
/**
 * @} End of "addtogroup tmgmt_ui_redirect_queue".
 */
