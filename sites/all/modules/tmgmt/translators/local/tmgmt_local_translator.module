<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_menu()
 *
 * @TODO Review permissions, maybe create new ones
 */
function tmgmt_local_translator_menu() {
  $items['translate/%tmgmt_job'] = array(
    'title' => 'Translate job',
    'page callback' => 'tmgmt_local_translator_page_job_translate',
    'page arguments' => array(1),
    'access arguments' => array('translate content'),
    'file' => 'tmgmt_local_translator.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/translator'] = array(
    'title' => 'Translator',
    'description' => 'Configure which languages the user can translate',
    'page callback' => 'tmgmt_local_translator_page_user_configure',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tmgmt_local_translator.pages.inc',
  );
  return $items;
}
/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_local_translator_tmgmt_translator_plugin_info() {
  return array(
    'local' => array(
      'label' => t('Local translator'),
      'description' => t('Local translation team.'),
      'plugin controller class' => 'TMGMTLocalTranslatorPluginController',
    ),
  );
}

/**
 * Implements hook_user_load()
 */
function tmgmt_local_translator_user_load($users) {
  $result = db_query('SELECT * FROM {tmgmt_local_user} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->tmgmt_local_translator[$record->type][$record->language] = TRUE;
  }
}

/**
 * Implements hook_user_update() {
 */
function tmgmt_local_translator_user_update(&$edit, $account, $category) {
  if ($category == 'account') {
    db_delete('tmgmt_local_user')
      ->condition('uid', $account->uid)
      ->execute();
    if (!empty($account->tmgmt_local_translator)) {
      foreach ($account->tmgmt_local_translator as $type => $list) {
        foreach (array_keys($list) as $langcode) {
          db_insert('tmgmt_local_user')
            ->fields(array(
              'uid' => $account->uid,
              'type' => $type,
              'language' => $langcode,
            ))
            ->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_user_update() {
 */
function tmgmt_local_translator_user_insert(&$edit, $account, $category) {

}

/**
 * Implements hook_views_api().
 */
function tmgmt_local_translator_views_api() {
  return array(
  	'api' => 3,
    'path' => drupal_get_path('module', 'tmgmt_local_translator') . '/includes',
  );
}

/**
 * Implements hook_views_default_views().
 */
function tmgmt_local_translator_views_default_views() {
  $module = 'tmgmt_local_translator';
  $directory = 'views';
  $extension = 'view.inc';
  $name = 'view';

  // From workbench_load_all_exports().
  $return = array();
  // Find all the files in the directory with the correct extension.
  $files = file_scan_directory(drupal_get_path('module', $module) . "/$directory", "/.$extension/");
  foreach ($files as $path => $file) {
    require $path;
    if (isset($$name)) {
      $return[$$name->name] = $$name;
    }
  }

  return $return;
}

/**
 * Implements hook_views_data_alter()
 */
function tmgmt_local_translator_views_data_alter($data) {
  //dpm($data);
}
