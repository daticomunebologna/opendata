<?php

/*
 * @file
 * Contains tests for Translation management
 */

/**
 * Base class for tests.
 */
class TMGMTBaseTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  /**
   * A default translator using the test translator.
   *
   * @var TMGMTTranslator
   */
  protected $default_translator;

  /**
   * List of permissions used by loginAsAdmin().
   *
   * @var array
   */
  protected $admin_permissions = array();

  /**
   * Drupal user object created by loginAsAdmin().
   *
   * @var object
   */
  protected $admin_user = NULL;

  /**
   * List of permissions used by loginAsTranslator().
   *
   * @var array
   */
  protected $translator_permissions = array();

  /**
   * Drupal user object created by loginAsTranslator().
   *
   * @var object
   */
  protected $translator_user = NULL;

  /**
   * Overrides DrupalWebTestCase::setUp()
   */
  function setUp(array $modules = array()) {
    $modules = array_merge(array('entity', 'tmgmt', 'tmgmt_test'), $modules);
    parent::setUp($modules);
    $this->default_translator = tmgmt_translator_load('test_translator');

    // Load default admin permissions.
    $this->admin_permissions = array(
      'administer languages',
      'access administration pages',
      'administer content types',
      'administer tmgmt',
    );

    // Load default translator user permissions.
    $this->translator_permissions = array(
      'create translation jobs',
      'submit translation jobs',
      'accept translation jobs',
    );
  }

  /**
   * Will create a user with admin permissions and log it in.
   *
   * @param array $additional_permissions
   *   Additional permissions that will be granted to admin user.
   * @param boolean $reset_permissions
   *   Flag to determine if default admin permissions will be replaced by
   *   $additional_permissions.
   *
   * @return object
   *   Newly created and logged in user object.
   */
  function loginAsAdmin($additional_permissions = array(), $reset_permissions = FALSE) {
    $permissions = $this->admin_permissions;

    if ($reset_permissions) {
      $permissions = $additional_permissions;
    }
    elseif (!empty($additional_permissions)) {
      $permissions = array_merge($permissions, $additional_permissions);
    }

    $this->admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->admin_user);
    return $this->admin_user;
  }

  /**
   * Will create a user with translator permissions and log it in.
   *
   * @param array $additional_permissions
   *   Additional permissions that will be granted to admin user.
   * @param boolean $reset_permissions
   *   Flag to determine if default admin permissions will be replaced by
   *   $additional_permissions.
   *
   * @return object
   *   Newly created and logged in user object.
   */
  function loginAsTranslator($additional_permissions = array(), $reset_permissions = FALSE) {
    $permissions = $this->translator_permissions;

    if ($reset_permissions) {
      $permissions = $additional_permissions;
    }
    elseif (!empty($additional_permissions)) {
      $permissions = array_merge($permissions, $additional_permissions);
    }

    $this->translator_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->translator_user);
    return $this->translator_user;
  }

  /**
   * Creates, saves and returns a translator.
   *
   * @return TMGMTTranslator
   */
  function createTranslator() {
    $translator = new TMGMTTranslator();
    $translator->name = strtolower($this->randomName());
    $translator->label = $this->randomName();
    $translator->plugin = 'test_translator';
    $translator->settings = array(
      'key' => $this->randomName(),
      'another_key' => $this->randomName(),
    );
    $this->assertEqual(SAVED_NEW, $translator->save());

    // Assert that the translator was assigned a tid.
    $this->assertTrue($translator->tid > 0);
    return $translator;
  }

  /**
   * Creates, saves and returns a translation job.
   *
   * @return TMGMTJob
   */
  function createJob($source = 'en', $target = 'de', $uid = 1)  {
    $job = tmgmt_job_create($source, $target, $uid);
    $this->assertEqual(SAVED_NEW, $job->save());

    // Assert that the translator was assigned a tid.
    $this->assertTrue($job->tjid > 0);
    return $job;
  }


  /**
   * Sets the proper environment.
   *
   * Currently just adds a new language.
   *
   * @param string $langcode
   *   The language code.
   */
  function setEnvironment($langcode) {
    // Add the language.
    $edit = array(
      'langcode' => $langcode,
    );
    $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));
    $this->assertText($langcode, t('Language added successfully.'));
    // This is needed to refresh the static cache of the language list.
    $languages = &drupal_static('language_list');
    $languages = NULL;
  }

}

/**
 * Utility test case class with helper methods to create entities and their
 * fields with populated translatable content. Extend this class if you create
 * tests in which you need Drupal entities and/or fields.
 */
abstract class TMGMTEntityTestCaseUtility extends TMGMTBaseTestCase {

  public $field_names = array();

  /**
   * Creates node type with several text fields with different cardinality.
   *
   * Internally it calls TMGMTEntityTestCaseUtility::attachFields() to create
   * and attach fields to newly created bundle. You can than use
   * $this->field_names['node']['YOUR_BUNDLE_NAME'] to access them.
   *
   * @param string $machine_name
   *   Machine name of the node type.
   * @param string $human_name
   *   Human readable name of the node type.
   * @param int $language_content_type
   *   Flag of how the translation should be handled.
   */
  function createNodeType($machine_name, $human_name, $language_content_type = 0) {

    // Create new bundle.
    $type = array(
      'type' => $machine_name,
      'name' => $human_name,
      'base' => 'node_content',
      'description' => '',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
    node_types_rebuild();

    // Set content type to be translatable as specified by
    // $language_content_type.
    $edit = array();
    $edit['language_content_type'] = $language_content_type;
    $this->drupalPost('admin/structure/types/manage/' . $machine_name, $edit, t('Save content type'));

    $translatable = FALSE;
    if (defined('ENTITY_TRANSLATION_ENABLED') && $language_content_type == ENTITY_TRANSLATION_ENABLED) {
      $translatable = TRUE;
    }

    // Push in also the body field.
    $this->field_names['node'][$machine_name][] = 'body';

    $this->attachFields('node', $machine_name, $translatable);

    // Change body field to be translatable.
    $body = field_info_field('body');
    $body['translatable'] = $translatable;
    field_update_field($body);
  }

  /**
   * Creates taxonomy vocabulary with custom fields.
   *
   * To create and attach fields it internally calls
   * TMGMTEntityTestCaseUtility::attachFields(). You can than access these
   * fields calling $this->field_names['node']['YOUR_BUNDLE_NAME'].
   *
   * @param string $machine_name
   *   Vocabulary machine name.
   * @param string $human_name
   *   Vocabulary human readable name.
   * @param bool|array $fields_translatable
   *   Flag or definition array to determine which or all fields should be
   *   translatable.
   *
   * @return stdClass
   *   Created vocabulary object.
   */
  function createTaxonomyVocab($machine_name, $human_name, $fields_translatable = TRUE) {
    $vocabulary = new stdClass();
    $vocabulary->name = $human_name;
    $vocabulary->machine_name = $machine_name;
    taxonomy_vocabulary_save($vocabulary);

    $this->attachFields('taxonomy_term', $vocabulary->machine_name, $fields_translatable);

    return $vocabulary;
  }

  /**
   * Creates fields of type text and text_with_summary of different cardinality.
   *
   * It will attach created fields to provided entity name and bundle.
   *
   * Field names will be stored in $this->field_names['entity']['bundle']
   * through which you can access them.
   *
   * @param string $entity_name
   *   Entity name to which fields should be attached.
   * @param string $bundle
   *   Bundle name to which fields should be attached.
   * @param bool|array $translatable
   *   Flag or definition array to determine which or all fields should be
   *   translatable.
   */
  function attachFields($entity_name, $bundle, $translatable = TRUE) {
    // Create several text fields.
    $field_types = array('text', 'text_with_summary');

    for ($i = 0 ; $i <= 5; $i++) {
      $field_type = $field_types[array_rand($field_types, 1)];
      $field_name = drupal_strtolower($this->randomName());

      // Create a field.
      $field = array(
        'field_name' => $field_name,
        'type' => $field_type,
        'cardinality' => mt_rand(1, 5),
        'translatable' => is_array($translatable) && isset($translatable[$i]) ? $translatable[$i] : (boolean) $translatable,
      );
      field_create_field($field);

      // Create an instance of the previously created field.
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => $entity_name,
        'bundle' => $bundle,
        'label' => $this->randomName(10),
        'description' => $this->randomString(30),
        'widget' => array(
          'type' => $field_type == 'text' ? 'text_textfield' : 'text_textarea_with_summary',
          'label' => $this->randomString(10),
        ),
      );
      field_create_instance($instance);

      // Store field names in case there are needed outside this method.
      $this->field_names[$entity_name][$bundle][] = $field_name;
    }
  }

  /**
   * Creates a node of a given bundle.
   *
   * It uses $this->field_names to populate content of attached fields.
   *
   * @param string $bundle
   *   Node type name.
   * @param string $sourcelang
   *   Source lang of the node to be created.
   *
   * @return object
   *   Newly created node object.
   */
  function createNode($bundle, $sourcelang = 'en') {
    $node = array(
      'type' => $bundle,
      'language' => $sourcelang,
    );

    foreach ($this->field_names['node'][$bundle] as $field_name) {
      $field_info = field_info_field($field_name);
      $cardinality = $field_info['cardinality'] == FIELD_CARDINALITY_UNLIMITED ? 1 : $field_info['cardinality'];

      // Create two deltas for each field.
      for ($delta = 0; $delta <= $cardinality; $delta++) {
        $node[$field_name][$sourcelang][$delta]['value'] = $this->randomName(20);
        if ($field_info['type'] == 'text_with_summary') {
          $node[$field_name][$sourcelang][$delta]['summary'] = $this->randomName(10);
        }
      }
    }

    return $this->drupalCreateNode($node);
  }

  /**
   * Creates a taxonomy term of a given vocabulary.
   *
   * It uses $this->field_names to populate content of attached fields. You can
   * access fields values using
   * $this->field_names['taxonomy_term'][$vocabulary->machine_name].
   *
   * @param object $vocabulary
   *   Vocabulary object for which the term should be created.
   *
   * @return object
   *   Newly created node object.
   */
  function createTaxonomyTerm($vocabulary) {
    $term = new stdClass();
    $term->name = $this->randomName();
    $term->description = $this->randomName();
    $term->vid = $vocabulary->vid;

    foreach ($this->field_names['taxonomy_term'][$vocabulary->machine_name] as $field_name) {
      $field_info = field_info_field($field_name);
      $cardinality = $field_info['cardinality'] == FIELD_CARDINALITY_UNLIMITED ? 1 : $field_info['cardinality'];
      $field_lang = $field_info['translatable'] ? 'en' : LANGUAGE_NONE;

      // Create two deltas for each field.
      for ($delta = 0; $delta <= $cardinality; $delta++) {
        $term->{$field_name}[$field_lang][$delta]['value'] = $this->randomName(20);
        if ($field_info['type'] == 'text_with_summary') {
          $term->{$field_name}[$field_lang][$delta]['summary'] = $this->randomName(10);
        }
      }
    }

    taxonomy_term_save($term);
    return taxonomy_term_load($term->tid);
  }
}

/**
 * Basic CRUD tests.
 */
class TMGMTCRUDTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('CRUD tests'),
      'description' => t('Basic crud operations for jobs and translators'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Test crud operations of translators.
   */
  function testTranslators() {
    $translator = $this->createTranslator();

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Update the settings.
    $translator->settings['new_key'] = $this->randomString();
    $this->assertEqual(SAVED_UPDATED, $translator->save());

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Delete the translator, make sure the translator is gone.
    $translator->delete();
    $this->assertFalse(tmgmt_translator_load($translator->tid));
  }

  /**
   * Test crud operations of jobs.
   */
  function testJobs() {
    $job = $this->createJob();

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->source_language, $loaded_job->source_language);
    $this->assertEqual($job->target_language, $loaded_job->target_language);

    // Assert that the created and changed information has been set to the
    // default value.
    $this->assertTrue($loaded_job->created > 0);
    $this->assertTrue($loaded_job->changed > 0);
    $this->assertEqual(0, $loaded_job->state);

    // Update the settings.
    $job->reference = 7;
    $this->assertEqual(SAVED_UPDATED, $job->save());

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->reference, $loaded_job->reference);

    // Test the job items.
    $item1 = $job->addItem('test_source', 'type', 5);
    $item2 = $job->addItem('test_source', 'type', 4);

    // Load and compare the items.
    $items = $job->getItems();
    $this->assertEqual(2, count($items));

    $this->assertEqual($item1->plugin, $items[$item1->tjiid]->plugin);
    $this->assertEqual($item1->item_type, $items[$item1->tjiid]->item_type);
    $this->assertEqual($item1->item_id, $items[$item1->tjiid]->item_id);
    $this->assertEqual($item2->plugin, $items[$item2->tjiid]->plugin);
    $this->assertEqual($item2->item_type, $items[$item2->tjiid]->item_type);
    $this->assertEqual($item2->item_id, $items[$item2->tjiid]->item_id);

    // Delete the translator, make sure the translator is gone.
    $job->delete();
    $this->assertFalse(tmgmt_job_load($job->tjid));
  }

  /**
   * Test crud operations of job items.
   */
  function testJobItems() {
    $job = $this->createJob();

    // Add some test items.
    $item1 = $job->addItem('test_source', 'type', 5);
    $item2 = $job->addItem('test_source', 'type', 4);

    // Test single load callback.
    $item = tmgmt_job_item_load($item1->tjiid);
    $this->assertEqual($item1->plugin, $item->plugin);
    $this->assertEqual($item1->item_type, $item->item_type);
    $this->assertEqual($item1->item_id, $item->item_id);

    // Test multiple load callback.
    $items = tmgmt_job_item_load_multiple(array($item1->tjiid, $item2->tjiid));

    $this->assertEqual(2, count($items));

    $this->assertEqual($item1->plugin, $items[$item1->tjiid]->plugin);
    $this->assertEqual($item1->item_type, $items[$item1->tjiid]->item_type);
    $this->assertEqual($item1->item_id, $items[$item1->tjiid]->item_id);
    $this->assertEqual($item2->plugin, $items[$item2->tjiid]->plugin);
    $this->assertEqual($item2->item_type, $items[$item2->tjiid]->item_type);
    $this->assertEqual($item2->item_id, $items[$item2->tjiid]->item_id);
  }

  /**
   * Test the calculations of the counters.
   */
  function testJobItemsCounters() {
    $job = $this->createJob();

    // Some test data items.
    $data1 = array(
      '#text' => 'The text to be translated.',
    );
    $data2 = array(
      '#text' => 'The text to be translated.',
      '#translation' => '',
    );
    $data3 = array(
      '#text' => 'The text to be translated.',
      '#translation' => 'The translated data. Set by the translator plugin.',
    );
    $data4 = array(
      '#text' => 'Another, longer text to be translated.',
      '#translation' => 'The translated data. Set by the translator plugin.',
      '#status' => TMGMT_DATA_ITEM_STATE_APPROVED,
    );
    $data5 = array(
      '#label' => 'label',
      'data1' => $data1,
      'data4' => $data4,
    );

    // No data items.
    $this->assertEqual(0, $job->getCountPending());
    $this->assertEqual(0, $job->getCountTranslated());
    $this->assertEqual(0, $job->getCountApproved());
    $this->assertEqual(0, $job->getWordCount());

    // Add a test items.
    $job_item1 = tmgmt_job_item_create('plugin', 'type', 4, array('tjid' => $job->tjid));
    $job_item1->save();

    // No pending, translated and confirmed data items.
    $job = entity_load_single('tmgmt_job', $job->tjid);
    $job_item1 = entity_load_single('tmgmt_job_item', $job_item1->tjiid);
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(0, $job_item1->getCountPending());
    $this->assertEqual(0, $job_item1->getCountTranslated());
    $this->assertEqual(0, $job_item1->getCountApproved());
    $this->assertEqual(0, $job->getCountPending());
    $this->assertEqual(0, $job->getCountTranslated());
    $this->assertEqual(0, $job->getCountApproved());

    // Add an untranslated data item.
    $job_item1->data['data_item1'] = $data1;
    $job_item1->save();

    // One pending data items.
    $job = entity_load_single('tmgmt_job', $job->tjid);
    $job_item1 = entity_load_single('tmgmt_job_item', $job_item1->tjiid);
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(1, $job_item1->getCountPending());
    $this->assertEqual(0, $job_item1->getCountTranslated());
    $this->assertEqual(5, $job_item1->getWordCount());
    $this->assertEqual(1, $job->getCountPending());
    $this->assertEqual(0, $job->getCountTranslated());
    $this->assertEqual(5, $job->getWordCount());

    // Add another untranslated data item.
    // Test with an empty translation set.
    $job_item1->data['data_item1'] = $data2;
    $job_item1->save();

    // One pending data items.
    $job = entity_load_single('tmgmt_job', $job->tjid);
    $job_item1 = entity_load_single('tmgmt_job_item', $job_item1->tjiid);
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(1, $job_item1->getCountPending());
    $this->assertEqual(0, $job_item1->getCountTranslated());
    $this->assertEqual(5, $job_item1->getWordCount());
    $this->assertEqual(1, $job->getCountPending());
    $this->assertEqual(0, $job->getCountTranslated());
    $this->assertEqual(5, $job->getWordCount());

    // Add a translated data item.
    $job_item1->data['data_item1'] = $data3;
    $job_item1->save();

    // One translated data items.
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(0, $job_item1->getCountPending());
    $this->assertEqual(1, $job_item1->getCountTranslated());
    $this->assertEqual(0, $job->getCountPending());
    $this->assertEqual(1, $job->getCountTranslated());

    // Add a confirmed data item.
    $job_item1->data['data_item1'] = $data4;
    $job_item1->save();

    // One confirmed data items.
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(1, $job_item1->getCountApproved());
    $this->assertEqual(1, $job->getCountApproved());

    // Add a translated and an untranslated and a confirmed data item
    $job = entity_load_single('tmgmt_job', $job->tjid);
    $job_item1 = entity_load_single('tmgmt_job_item', $job_item1->tjiid);
    $job_item1->data['data_item1'] = $data1;
    $job_item1->data['data_item2'] = $data3;
    $job_item1->data['data_item3'] = $data4;
    $job_item1->save();

    // One pending and translated data items each.
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(1, $job->getCountPending());
    $this->assertEqual(1, $job->getCountTranslated());
    $this->assertEqual(1, $job->getCountApproved());
    $this->assertEqual(16, $job->getWordCount());

    // Add nested data items.
    $job_item1->data['data_item1'] = $data5;
    $job_item1->save();

    // One pending data items.
    $job = entity_load_single('tmgmt_job', $job->tjid);
    $job_item1 = entity_load_single('tmgmt_job_item', $job_item1->tjiid);
    $this->assertEqual('label', $job_item1->data['data_item1']['#label']);
    $this->assertEqual(3, count($job_item1->data['data_item1']));

    // Add a greater number of data items
    for ($index = 1; $index <= 3; $index++) {
      $job_item1->data['data_item' . $index] = $data1;
    }
    for ($index = 4; $index <= 10; $index++) {
      $job_item1->data['data_item' . $index] = $data3;
    }
    for ($index = 11; $index <= 15; $index++) {
      $job_item1->data['data_item' . $index] = $data4;
    }
    $job_item1->save();

    // 3 pending and 7 translated data items each.
    $job = entity_load_single('tmgmt_job', $job->tjid);
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(3, $job->getCountPending());
    $this->assertEqual(7, $job->getCountTranslated());
    $this->assertEqual(5, $job->getCountApproved());

    // Add several job items
    $job_item2 = tmgmt_job_item_create('plugin', 'type', 5, array('tjid' => $job->tjid));
    for ($index = 1; $index <= 4; $index++) {
      $job_item2->data['data_item' . $index] = $data1;
    }
    for ($index = 5; $index <= 12; $index++) {
      $job_item2->data['data_item' . $index] = $data3;
    }
    for ($index = 13; $index <= 16; $index++) {
      $job_item2->data['data_item' . $index] = $data4;
    }
    $job_item2->save();

    // 3 pending and 7 translated data items each.
    $job = entity_load_single('tmgmt_job', $job->tjid);
    drupal_static_reset('tmgmt_job_statistics_load');
    $this->assertEqual(7, $job->getCountPending());
    $this->assertEqual(15, $job->getCountTranslated());
    $this->assertEqual(9, $job->getCountApproved());
  }

}

/**
 * Tests interaction between core and the plugins.
 */
class TMGMTPluginsTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Plugin tests'),
      'description' => t('Verifies basic functionality of source and translator plugins'),
      'group' => t('Translation Management'),
    );
  }

  function createJob($action = 'translate') {
    $job = parent::createJob();

    for ($i = 1; $i < 3; $i++) {
      if ($i == 3) {
        // Explicitly define the data for the third item.
        $data['data'] = array(
          'dummy' => array(
            'deep_nesting' => array(
              '#text' => 'Stored data',
            ),
          ),
        );
        $job->addItem('test_source', 'test', $i, array($data));
      }
      $job->addItem('test_source', 'test', $i);
    }

    // Manually specify the translator for now.
    $job->translator = $this->default_translator->name;
    $job->settings = array('action' => $action);

    return $job;
  }

  function testBasicWorkflow() {

    // Submit a translation job.
    $submit_job = $this->createJob('submit');
    $submit_job->requestTranslation();
    $submit_job = tmgmt_job_load($submit_job->tjid);
    $this->assertTrue($submit_job->isActive());
    $messages = $submit_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual('Test submit.', $last_message->message);

    // Translate a job.
    $translate_job = $this->createJob('translate');
    $translate_job->requestTranslation();
    $translate_job = tmgmt_job_load($translate_job->tjid);
    foreach ($translate_job->getItems() as $job_item) {
      $this->assertTrue($job_item->isNeedsReview());
    }

    $messages = $translate_job->getMessages();
    // array_values() results in numeric keys, which is necessary for list.
    list($debug, $translated, $needs_review) = array_values($messages);
    $this->assertEqual('Test translator called.', $debug->message);
    $this->assertEqual('debug', $debug->type);
    $this->assertEqual('Test translation created.', $translated->message);
    $this->assertEqual('status', $translated->type);

    // The third message is specific to a job item and has different state
    // constants.
    $this->assertEqual('The translation of !source to @language is finished and can now be <a href="!review_url">reviewed</a>.', $needs_review->message);
    $this->assertEqual('status', $needs_review->type);

    $i = 1;
    foreach ($translate_job->getItems() as $item) {
      // Check the translated text.
      if ($i != 3) {
        $expected_text = 'de_Text for job item with type ' . $item->item_type . ' and id ' . $item->item_id . '.';
      }
      else {
        // The third item has an explicitly stored data value.
        $expected_text = 'de_Stored data';
      }
      $item_data = $item->getData();
      $this->assertEqual($expected_text, $item_data['dummy']['deep_nesting']['#translation']['#text']);
      $i++;
    }

    foreach ($translate_job->getItems() as $job_item) {
      $job_item->acceptTranslation();
    }

    // @todo Accepting does not result in messages on the job anymore.
    // Update once there are job item messages.
    /*
    $messages = $translate_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual('Job accepted', $last_message->message);
    $this->assertEqual('status', $last_message->type);*/

    // Check if the translations have been "saved".
    foreach ($translate_job->getItems() as $item) {
      $this->assertTrue(variable_get('tmgmt_test_saved_translation_' . $item->item_type . '_' . $item->item_id, FALSE));
    }

    // A rejected job.
    $reject_job = $this->createJob('reject');
    $reject_job->requestTranslation();
    // Still rejected.
    $this->assertTrue($reject_job->isRejected());

    $messages = $reject_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual('This is not supported.', $last_message->message);
    $this->assertEqual('error', $last_message->type);

    // A failing job.
    $failing_job = $this->createJob('fail');
    $failing_job->requestTranslation();
    // Still new.
    $this->assertTrue($failing_job->isUnprocessed());

    $messages = $failing_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual('Service not reachable.', $last_message->message);
    $this->assertEqual('error', $last_message->type);
  }
}


/**
 * Test the helper functions in tmgmt.module.
 */
class TMGMTHelperTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Helper functions Test case'),
      'description' => t('Helper functions for other modules'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Tests tmgmt_job_match_item()
   *
   * @see tmgmt_job_match_item
   */
  function testTMGTJobMatchItem() {
    $this->loginAsAdmin();
    $this->setEnvironment('fr');
    $this->setEnvironment('es');

    // Add a job from en to fr and en to sp.
    $job_en_fr = $this->createJob('en', 'fr');
    $job_en_sp = $this->createJob('en', 'es');

    // Add a job which has existing source-target combinations.
    $this->assertEqual($job_en_fr->tjid, tmgmt_job_match_item('en', 'fr')->tjid);
    $this->assertEqual($job_en_sp->tjid, tmgmt_job_match_item('en', 'es')->tjid);

    // Add a job which has no existing source-target combination.
    $this->assertTrue(tmgmt_job_match_item('fr', 'es'));
  }

  /**
   * Tests the tmgmt_data_item_label() function.
   *
   * @todo: Move into a unit test case once available.
   */
  function testDataIemLabel() {
    $no_label = array(
      '#text' => 'No label',
    );
    $this->assertEqual(tmgmt_data_item_label($no_label), 'No label');
    $label = array(
      '#parent_label' => array(),
      '#label' => 'A label',
    );
    $this->assertEqual(tmgmt_data_item_label($label), 'A label');
    $parent_label = array(
      '#parent_label' => array('Parent label', 'Sub label'),
      '#label' => 'A label',
    );
    $this->assertEqual(tmgmt_data_item_label($parent_label), 'Parent label > Sub label');
  }
}

/**
 * Upgrade tests.
 */
class TMGMTUpgradeAlpha1TestCase extends DrupalWebTestCase {

  protected $profile = 'testing';

  static function getInfo() {
    return array(
      'name' => t('Upgrade tests Alpha1'),
      'description' => t('Tests the upgrade path from 7.x-1.0-alpha1'),
      'group' => t('Translation Management'),
    );
  }

  function setUp() {
    // Enable all dependencies.
    parent::setUp(array('entity', 'views', 'translation', 'locale'));

    // Create the tmgmt tables and fill them.
    module_load_include('inc', 'tmgmt', 'tests/tmgmt_alpha1_dump.sql');

    // @todo: Figure out why this is necessary.
    $enabled_modules = db_query("SELECT name FROM {system} where status = 1 and type = 'module'")->fetchCol();
    foreach ($enabled_modules as $enabled_module) {
      module_load_install($enabled_module);
      // Set the schema version to the number of the last update provided
      // by the module.
      $versions = drupal_get_schema_versions($enabled_module);
      $version = $versions ? max($versions) : SCHEMA_INSTALLED;
      db_update('system')
        ->condition('name', $enabled_module)
        ->fields(array('schema_version' => $version))
        ->execute();
    }

    // Set schema version to 0 and then install the tmgmt modules, to simulate
    // an enabling.
    db_update('system')
      ->condition('name', array('tmgmt', 'tmgmt_ui', 'tmgmt_field', 'tmgmt_node', 'tmgmt_test', 'tmgmt_node_ui'))
      ->fields(array(
        'schema_version' => 0,
      ))
      ->execute();
    module_enable(array('tmgmt', 'tmgmt_ui', 'tmgmt_field', 'tmgmt_node', 'tmgmt_test', 'tmgmt_node_ui'));

    // Log in as a user that can run update.php
    $admin = $this->drupalCreateUser(array('administer software updates'));
    $this->drupalLogin($admin);

    $this->performUpgrade();
  }

  /**
   * Verifies that the data has been migrated properly
   */
  function testUpgradePath() {
    // Log in as a user with enough permissions.
    $translator = $this->drupalCreateUser(array('administer tmgmt'));
    $this->drupalLogin($translator);
    // Go to a job and check the review form.
    $this->drupalGet('admin/config/regional/tmgmt/jobs/1');
    // Make sure the #status values have been set accordingly.
    $this->assertRaw(t('Approved: @approved, translated: @translated, pending: @pending.', array('@approved' => 0, '@translated' => 2, '@pending' => 0)));
    // Extract the word count field and make sure it's correct.
    $word_count = $this->xpath('//td[contains(@class, :class)]', array(':class' => 'views-field-word-count-1'));
    $this->assertEqual(6, trim((string)reset($word_count)));

    $this->clickLink(t('review'));
    // Needs review icon.
    $this->assertRaw('tmgmt-ui-icon-yellow tmgmt-ui-state-translated');
    // Translated values.
    $this->assertRaw('de_Test content');
    $this->assertRaw('de_This is the body.');
    // Reject button.
    $this->assertRaw('✗');
  }


  /**
   * Perform the upgrade.
   *
   * Copied and adapted from UpgradePathTestCase::performUpgrade().
   *
   * @param $register_errors
   *   Register the errors during the upgrade process as failures.
   * @return
   *   TRUE if the upgrade succeeded, FALSE otherwise.
   */
  protected function performUpgrade($register_errors = TRUE) {
    $update_url = $GLOBALS['base_url'] . '/update.php';

    // Load the first update screen.
    $this->drupalGet($update_url, array('external' => TRUE));
    if (!$this->assertResponse(200)) {
      return FALSE;
    }

    // Continue.
    $this->drupalPost(NULL, array(), t('Continue'));
    if (!$this->assertResponse(200)) {
      return FALSE;
    }

    // The test should pass if there are no pending updates.
    $content = $this->drupalGetContent();
    if (strpos($content, t('No pending updates.')) !== FALSE) {
      $this->pass(t('No pending updates and therefore no upgrade process to test.'));
      $this->pendingUpdates = FALSE;
      return TRUE;
    }

    // Go!
    $this->drupalPost(NULL, array(), t('Apply pending updates'));
    if (!$this->assertResponse(200)) {
      return FALSE;
    }

    // Check for errors during the update process.
    foreach ($this->xpath('//li[@class=:class]', array(':class' => 'failure')) as $element) {
      $message = strip_tags($element->asXML());
      $this->upgradeErrors[] = $message;
      if ($register_errors) {
        $this->fail($message);
      }
    }

    if (!empty($this->upgradeErrors)) {
      // Upgrade failed, the installation might be in an inconsistent state,
      // don't process.
      return FALSE;
    }

    // Check if there still are pending updates.
    $this->drupalGet($update_url, array('external' => TRUE));
    $this->drupalPost(NULL, array(), t('Continue'));
    if (!$this->assertText(t('No pending updates.'), t('No pending updates at the end of the update process.'))) {
      return FALSE;
    }

    // Clear caches.
    $this->checkPermissions(array(), TRUE);
  }

}
