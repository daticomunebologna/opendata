<?php

/**
 * Basic Node Source tests.
 *
 */
class TMGMTNodeSourceUITestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Node Source UI tests'),
      'description' => t('Tests the user interface for node translation sources.'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_node_ui', 'block'));
    variable_set('language_content_type_page', TRANSLATION_ENABLED);

    // We need the administer blocks permission.
    $this->loginAsAdmin(array('administer blocks'));

    $this->setEnvironment('de');
    $this->setEnvironment('fr');
    $this->setEnvironment('es');
    $this->setEnvironment('el');

    // @todo Re-enable this when switching to testing profile.
    // Enable the main page content block for hook_page_alter() to work.
    $edit = array(
      'blocks[system_main][region]' => 'content',
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));

    // Copied from standard.install
    $type = array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
    node_types_rebuild();
  }

    /**
   * Tests the create, submit and accept permissions.
   */
  function testPermissions() {

    $no_permissions = $this->drupalCreateUser();
    $this->drupalLogin($no_permissions);
    $this->drupalGet('admin/config/regional/tmgmt');
    $this->assertResponse(403);

    // Test with a user that is only allowed to create jobs.
    $create_user = $this->drupalCreateUser(array('access administration pages', 'translate content', 'create translation jobs'));
    $this->drupalLogin($create_user);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));
    $this->assertText(t('One job has been created.'));
    // Verify that we are still on the translate tab.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));

    $this->drupalGet('admin/config/regional/tmgmt');
    $this->assertResponse(200);
    $this->assertLink(t('manage'));
    $this->assertNoLink(t('submit'));
    $this->assertNoLink(t('delete'));
    $this->assertText(t('From English to German'));
    $this->clickLink(t('manage'));
    $this->assertResponse(200);
    $this->assertNoRaw(t('Submit to translator'));

    // Try to access the delete page directly.
    $this->drupalGet($this->getUrl() . '/delete');
    $this->assertResponse(403);

    // Log in as user with only submit permission.
    $submit_user = $this->drupalCreateUser(array('access administration pages', 'translate content', 'submit translation jobs'));
    $this->drupalLogin($submit_user);

    // Go to the translate tab, verify that there is no request translation
    // button.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');
    $this->assertNoRaw(t('Request translation'));

    // Go to the overview and submit the job.
    $this->drupalGet('admin/config/regional/tmgmt');
    $this->assertResponse(200);
    $this->assertLink(t('submit'));
    $this->assertNoLink(t('manage'));
    $this->assertNoLink(t('delete'));
    $this->assertText(t('From English to German'));

    $this->clickLink('submit');

    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that the job is active now.
    $this->assertText(t('Active'));
    $this->assertLink(t('cancel'));
    $this->clickLink(t('manage'));
    $this->assertText(t('Needs review'));
    $this->assertNoLink(t('review'));
    $this->assertTrue(empty($urls));

    // Now log in as user with only accept permission and review the job.
    $accept_user = $this->drupalCreateUser(array('access administration pages', 'accept translation jobs'));
    $this->drupalLogin($accept_user);

    $this->drupalGet('admin/config/regional/tmgmt');
    $this->clickLink('manage');
    $this->clickLink('review');

    $this->drupalPost(NULL, array(), 'âœ“');
    // Verify that the accepted character is shown.
    $this->assertText('&#x2611;');
    $this->drupalPost(NULL, array(), t('Accept'));
    $this->assertText(t('Accepted'));
    $this->assertText('1/0/0');

    // Go to the translate tab, verify that there is no request translation
    // button.
    //$this->drupalGet('node/' . $node->nid);
    //$this->clickLink('Translate');
    //$this->assertNoRaw(t('Request translation'));
  }

  /**
   * Test the translate tab for a single checkout.
   */
  function testTranslateTabSingleCheckout() {

    // Create a user that is allowed to translate nodes.
    $translater = $this->drupalCreateUser(array('translate content', 'create translation jobs', 'submit translation jobs', 'accept translation jobs'));
    $this->drupalLogin($translater);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertText(t('One job needs to be checked out.'));
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));

    // Submit.
    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('node/' . $node->nid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node->title, '@language' => t('German'))));

    // Review.
    $this->clickLink(t('Needs review'));

    // @todo Review job throuh the UI.
    $items = tmgmt_job_item_load_latest('node', 'node', $node->nid, 'en');
    $items['de']->acceptTranslation();

    // German node should now be listed and be clickable.
    $this->drupalGet('node/' . $node->nid . '/translate');
    $this->clickLink('de_' . $node->title);
  }

  /**
   * Test the translate tab for a single checkout.
   */
  function testTranslateTabMultipeCheckout() {
    // Create a user that is allowed to translate nodes.
    $translater = $this->drupalCreateUser(array('translate content', 'create translation jobs', 'submit translation jobs', 'accept translation jobs'));
    $this->drupalLogin($translater);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
      'languages[es]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertText(t('2 jobs need to be checked out.'));

    // Submit all jobs.
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));
    $this->drupalPost(NULL, array(), t('Submit to translator and continue'));
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));
    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('node/' . $node->nid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node->title, '@language' => t('Spanish'))));

    // Review.
    $this->clickLink(t('Needs review'));

    // @todo Review job throuh the UI.
    $items = tmgmt_job_item_load_latest('node', 'node', $node->nid, 'en');
    $items['de']->acceptTranslation();
    $items['es']->acceptTranslation();

    // Translated nodes should now be listed and be clickable.
    $this->drupalGet('node/' . $node->nid . '/translate');
    $this->clickLink('de_' . $node->title);

    // Translated nodes should now be listed and be clickable.
    $this->drupalGet('node/' . $node->nid . '/translate');
    $this->clickLink('es_' . $node->title);
  }

  /**
   * Test the translate tab for a single checkout.
   */
  function testTranslateTabAutomatedCheckout() {
    // Hide settings on the test translator.
    $default_translator = tmgmt_translator_load('test_translator');
    $default_translator->settings = array(
      'expose_settings' => FALSE,
    );
    $default_translator->save();

    // Create a user that is allowed to translate nodes.
    $translater = $this->drupalCreateUser(array('translate content', 'create translation jobs', 'submit translation jobs', 'accept translation jobs'));
    $this->drupalLogin($translater);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertNoText(t('One job needs to be checked out.'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('node/' . $node->nid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node->title, '@language' => t('German'))));

    // Review.
    $this->clickLink(t('Needs review'));

    // @todo Review job throuh the UI.
    $items = tmgmt_job_item_load_latest('node', 'node', $node->nid, 'en');
    $items['de']->acceptTranslation();

    // German node should now be listed and be clickable.
    $this->drupalGet('node/' . $node->nid . '/translate');
    $this->clickLink('de_' . $node->title);
  }

  /**
   * Test the translate tab for a single checkout.
   */
  function testTranslateTabDisabledQuickCheckout() {
    variable_set('tmgmt_quick_checkout', FALSE);

    // Hide settings on the test translator.
    $default_translator = tmgmt_translator_load('test_translator');
    $default_translator->settings = array(
      'expose_settings' => FALSE,
    );
    $default_translator->save();

    // Create a user that is allowed to translate nodes.
    $translater = $this->drupalCreateUser(array('translate content', 'create translation jobs', 'submit translation jobs', 'accept translation jobs'));
    $this->drupalLogin($translater);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertText(t('One job needs to be checked out.'));
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));

    // Submit.
    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('node/' . $node->nid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node->title, '@language' => t('German'))));

    // Review.
    $this->clickLink(t('Needs review'));

    // @todo Review job throuh the UI.
    $items = tmgmt_job_item_load_latest('node', 'node', $node->nid, 'en');
    $items['de']->acceptTranslation();

    // German node should now be listed and be clickable.
    $this->drupalGet('node/' . $node->nid . '/translate');
    $this->clickLink('de_' . $node->title);
  }
}

/**
 * Content Overview Tests
 */
class TMGMTNodeSourceUIOverviewTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Node Source UI Overview tests'),
      'description' => t('Tests the user interface for node overviews.'),
      'group' => t('Translation Management'),
      'dependencies' => array('rules'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_node_ui'));
    variable_set('language_content_type_page', TRANSLATION_ENABLED);

    $this->loginAsAdmin();

    $this->setEnvironment('de');
    $this->setEnvironment('fr');
    $this->setEnvironment('es');
    $this->setEnvironment('el');

    // Copied from standard.install
    $type = array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
    node_types_rebuild();

    $this->checkPermissions(array(), TRUE);

    // Allow auto-accept.
    $default_translator = tmgmt_translator_load('test_translator');
    $default_translator->settings = array(
      'auto_accept' => TRUE,
    );
    $default_translator->save();
  }

  /**
   * Tests translating through the content source overview.
   */
  function testNodeSourceOverview() {

    // Login as translator to translate nodes.
    $this->loginAsTranslator(array(
      'translate content',
      'edit any page content',
      'create page content',
    ));

    // Create a bunch of english nodes.
    $node1 = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));
    $node2 = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));
    $node3 = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));
    $node4 = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the overview page and make sure the nodes are there.
    $this->drupalGet('admin/config/regional/tmgmt/node');

    $this->assertText($node1->title);
    $this->assertText($node2->title);
    $this->assertText($node3->title);
    $this->assertText($node4->title);

    // Now translate them.
    $edit = array(
      'views_bulk_operations[0]' => TRUE,
      'views_bulk_operations[1]' => TRUE,
      'views_bulk_operations[2]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translations'));

    // Some assertions on the submit form.
    $this->assertText(t('From English to ? (Unprocessed)'));
    $this->assertText(t('Translation for @title', array('@title' => $node1->title)));
    $this->assertText(t('Translation for @title', array('@title' => $node2->title)));
    $this->assertText(t('Translation for @title', array('@title' => $node3->title)));
    $this->assertNoText(t('Translation for @title', array('@title' => $node4->title)));

    // Translate
    $edit = array(
      'target_language' => 'de',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertNoText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node1->title, '@language' => t('German'))));
    $this->assertText(t('The translation for @title has been accepted.', array('@title' => $node1->title)));
    $this->assertNoText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node2->title, '@language' => t('German'))));
    $this->assertText(t('The translation for @title has been accepted.', array('@title' => $node1->title)));
    $this->assertNoText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node3->title, '@language' => t('German'))));
    $this->assertText(t('The translation for @title has been accepted.', array('@title' => $node1->title)));

    // Check the translated node.
    $this->clickLink($node1->title);
    $this->clickLink(t('Translate'));
    $this->assertText('de_' . $node1->title);
  }
}

