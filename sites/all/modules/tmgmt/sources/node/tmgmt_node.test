<?php

/**
 * Basic Node Source tests.
 *
 */
class TMGMTNodeSourceTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Node Source tests'),
      'description' => t('Exporting source data from nodes and saving translations back to nodes'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_node', 'translation'));
    $this->admin_user = $this->drupalCreateUser(array('administer languages', 'access administration pages', 'administer content types', 'administer taxonomy'));
    variable_set('language_content_type_page', TRANSLATION_ENABLED);
  }

  /**
   * Adds some fields to a node bundle.
   *
   * @param string $bundle
   *  The node bundle.
   */
  function addFields($bundle = 'article') {
    $translatables = array(0, 1, 0, 0);
    foreach ($translatables as $value) {
      $field_type = rand(0, 1) ? 'text' : 'text_with_summary';
      $field_name = drupal_strtolower($this->randomName() . '_field_name');
      $field = array('field_name' => $field_name, 'type' => $field_type, 'cardinality' => 4, 'translatable' => $value);
      $field = field_create_field($field);
      $field_id = $field['id'];
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'node',
        'bundle' => $bundle,
        'label' => $this->randomName() . '_label',
        'description' => $this->randomName() . '_description',
        'weight' => mt_rand(0, 127),
        'widget' => array(
          'type' => $field_type == 'text' ? 'text_textfield' : 'text_textarea_with_summary',
          'label' => 'Test Field',
        )
      );
      field_create_instance($instance);
      $this->field_names[$bundle][] = $field_name;
    }
  }

  function testNodeSource() {
    $this->drupalLogin($this->admin_user);
    $langcode = 'de';
    $bundle = 'article';
    $this->setEnvironment($langcode);
    $this->addFields($bundle);
    // Create a node and translate it.
    $edit = array(
      'type' => $bundle,
      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString(32)))),
    );
    // Put some values in the new fields.
    foreach ($this->field_names[$bundle] as $field_name) {
      $field_info = field_info_field($field_name);
      $field_lang = $field_info['translatable'] ? 'en' : LANGUAGE_NONE;
      for ($index = 0; $index <= 2; $index++) {
        $edit[$field_name][$field_lang][$index]['value'] = $this->randomString(20);
        if ($field_info['type'] == 'text_with_summary') {
          $edit[$field_name][$field_lang][$index]['summary'] = $this->randomString(10);
        }
      }
    }
    $node = $this->drupalCreateNode($edit);
    $node->language = 'en';
    node_save($node);

    // Create the new job and job item.
    $job = $this->createJob();
    $job->translator = 'test_translator';
    $job->settings = array();
    $job->addItem('node', 'node', $node->nid);
    $job->requestTranslation();

    foreach ($job->getItems() as $item) {
      /* @var $item TMGMTJobItem */
      $item->acceptTranslation();
      $node = node_load($item->item_id);
      // Check if the tnid attribute is bigger than 0.
      $this->assertTrue($node->tnid > 0, t('The source node is part of a translation set.'));
      // The translations may be statically cached, so make make sure
      // to reset the cache before loading the node translations.
      $cached_translations = &drupal_static('translation_node_get_translations', array());
      $cached_translations[$node->tnid] = NULL;
      // Load the translation set of the source node.
      $translations = translation_node_get_translations($node->tnid);
      if (!isset($translations[$langcode])) {
        $this->assertNotNull($translations[$langcode], t('Translations found for the source node.'));
      }
      else {
        $tnode = node_load($translations[$langcode]->nid, NULL, TRUE);
        $this->checkTranslatedData($tnode, $item->translation, $langcode);
      }
    }
  }

  /**
   * Compares the data from a node with the translated data.
   *
   * @param object $tnode
   *  The translated node object.
   *
   * @param array $translation
   *  An array with the translated data.
   *
   * @param string $langcode
   *  The code of the target language.
   */
  function checkTranslatedData($tnode, $translation, $langcode) {
    foreach ($translation as $field_name => $values) {
      // Special case for the node  title.
      if ($field_name == 'node_title') {
        $this->assertEqual($tnode->title, $values['#text'], t('The title of the translated node does match with the translated data.'));
        continue;
      }
      if (!is_array($values)) {
        continue;
      }
      $index = 0;
      $field_info = field_info_field($field_name);
      foreach ($values as $delta => $value) {
        $field_lang = $field_info['translatable'] ? $langcode : LANGUAGE_NONE;
        foreach ($value as $input_name => $input_value) {
          $this->assertEqual($tnode->{$field_name}[$field_lang][$index][$input_name], $input_value['#text'], t('The !input_name !index of the !field field in the translated node does match with the translated data.', array('!field' => $field_name, '!input_name' => $input_name, '!index' => $index)));
        }
        $index++;
      }
    }
  }
}
